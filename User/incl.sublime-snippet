<snippet>
  <content><![CDATA[
#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
// Policy Based Data Structure
// Note:Upper Bound would work as lower bound and vice versa
//  Find won't work in less_equal, so use find_by_order(order_of_key(a[i]))
//  OR store pairs in less
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <class T>
using pbds = tree<T, null_type, less_equal<T>, rb_tree_tag,
      tree_order_statistics_node_update>;
#define int long long
// #define double long double
// #define ll long long
#define ull unsigned long long
#define ff first
#define ss second
#define inx(x) int x; cin>>x;
#define fo(i,a,b) for(int i=a;i<b;i++)
#define fa(x,y) for(auto &x: y)
#define rajdhani ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) x.begin(),x.end()
#define sva(vi) sort(vi.begin() ,vi.end())
#define svd(vi) sort(vi.begin(),vi.end(),greater<int>())
#define saa(a,n) sort(a,a+n)
#define YY cout<<"YES\n";
#define NN cout<<"NO\n";
#define vii vector<pair<int,int>>
#define minHeap priority_queue<int,vector<int>,greater<int>>
#define maxHeap priority_queue<int>
#define maxHeapPair priority_queue<pair<int,int>>
#define minHeapPair priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>
#define vi vector<int>
#define str string
#define inviii(x,n) for(int i=0;i<n;i++){pair<int,int>p;cin>>p.first>>p.second;x.pb(p);}
#define invii(x,n) for(int i=0;i<n;i++){int tt;cin>>tt;x.pb(tt);}
#define pb push_back
#define MOD1 998244353
#define MOD 1000000007
const int N = 1e5 + 7;

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif



void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(set <T, V> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}


void solve(int tc)
{
     
}

int32_t main() {
#ifndef ONLINE_JUDGE
     freopen("error.txt", "w", stderr);
#endif
     rajdhani
     // seive();
     // pre(MOD);
     int t = 1;
     cin >> t;
     fo(i, 1, t + 1) {
          string test = "#" + to_string(i); char done = '\n';
          debug(test); solve(i); debug(done);
     }
     return 0;
}














]]></content>
  <tabTrigger>incl</tabTrigger>
  <description></description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>